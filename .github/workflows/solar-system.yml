name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  NODE_VERSION: 20
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  KUBECTL_VERSION: v1.26.0

    
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongodb:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
                  
        strategy:
          matrix:
            nodejs_version: [19, 20]
            os: [ubuntu-latest]
             
        runs-on: ${{ matrix.os }}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version }}
        
        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          id: unit_test
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xm
    
    code-coverage:
        name: Code Coverage
        container: 
          image: node:18
        services:
          mongodb:
            image: siddharth67/mongo-db:non-prod
            options: 
              --name mongo
        env:
          MONGO_URI: 'mongodb://mongo:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        #continue-on-error: true
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4
  
          # Comment out as running this job in a container defined above in this step
          #- name: Setup NodeJS Version - ${{ env.NODE_VERSION }}
          #  uses: actions/setup-node@v3
          #  with:
          #    node-version: ${{ env.NODE_VERSION }}
          
          - name: Cache NPM Dependencies
            uses: actions/cache@v3
            with:
              path: node_modules
              key: ${{ runner.os }}-node-module-${{ hashFiles('package-lock.json') }}
          
          - name: Install Dependencies
            run: npm install
      
          - name: Unit Testing
            run: npm run coverage
            continue-on-error: true
            
          - name: Archive Test Result
            uses: actions/upload-artifact@v3
            with:
              name: code-Coverage-Result
              path: coverage
              retention-days: 5
    
    docker:
      name: Containerization
      # permission added to the GITHUB_TOKEN to allow docker push to GHCR
      permissions: 
        packages: write
      needs: [unit-testing, code-coverage]
      runs-on: ubuntu-latest
      steps: 
        - name: Checkout Repository
          uses: actions/checkout@v4
        
        - name: Login to docker
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
        
        - name: Login to GHCR
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Docker Build and Test
          uses: docker/build-push-action@v5
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
        
        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}.{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live

        - name: Docker push
          uses: docker/build-push-action@v5
          with:
            context: .
            push: true
            tags: |
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
        
    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      environment: development

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
        
        # When Using Kind Cluster, it will install Kubectl CLI 
        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
             version: ${{ env.KUBECTL_VERSION }} # default is latest stable
          id: install
        
        # uncomment for real cluster outside this pipeline. here we are using a Kind Cluster for testing
        - uses: azure/k8s-set-context@v4
          with:
             method: kubeconfig
             kubeconfig: ${{ secrets.KUBECONFIG }}
             #context: <context name> # current-context from kubeconfig is used as default
        
        
        ## Using Kind Cluster as there are no real clsusters to use
        #- name: Setup Kind Cluster
        #  uses: helm/kind-action@v1
        
        - name: Fetch Kubernetes Cluster Details
          run: |
            kubectl version --short -o yaml
            #echo ----------------------------------------------------
            #kubectl get nodes -o wide
        #
        #- name: Install Nginx Ingress Controller
        #  run: | 
        #    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
        #
        #    kubectl wait --namespace ingress-nginx \
        #      --for=condition=ready pod \
        #      --selector=app.kubernetes.io/component=controller \
        #      --timeout=120s
        #    
        #    echo "INGRESS_IP=$(kubectl -n ingress-nginx get service ingress-nginx.controller -o jsonpath="{.status.loadbalancer.ingress[0].ip}")" >> $GITHUB_ENV
        
        #- uses: cschleiden/replace-tokens@v1
        #  with:
        #    tokenPrefix: '_{_'
        #    tokenSuffix: '_}_'
        #    files: '["kubernetes/development/*.yaml"]'
        #  env:
        #    NAMEPSACE: test #${{ vars.NAMEPSACE }}
        #    REPLICAS: 2 #${{ vars.REPLICAS }}
        #    IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
        #    #INGRESS_IP: ${{ env.INGRESS_IP }}
        #
        #- name: Apply Kubernetes Manifest
        #  run: |
        #    kubectl apply -f kubernetes/development/   
        #    sleep 10
        #    kubectl get deployments
            

          
        
         
        

        